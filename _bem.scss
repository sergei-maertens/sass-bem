///
/// Library to build BEM classnames, with the strict interpretation.
///
/// BEM class names in SASS can become unreadable for complex combinations, and often
/// the composed sass rules do not output specific enough selectors.
///
/// These mixins help you in preventing output like:
///
///   `.block--modifier {...}`
///   `.block__element` {...}`
///
/// Instead, the correct output is generated:
///
///   `.block.block--modifier {...}`
///   `.block .block__element {...}`
///

// https://stackoverflow.com/a/42295154
@function str-split($string, $separator) {
    // empty array/list
    $split-arr: ();
    // first index of separator in string
    $index : str-index($string, $separator);
    // loop through string
    @while $index != null {
        // get the substring from the first character to the separator
        $item: str-slice($string, 1, $index - 1);
        // push item to array
        $split-arr: append($split-arr, $item);
        // remove item and separator from string
        $string: str-slice($string, $index + 1);
        // find new index of separator
        $index : str-index($string, $separator);
    }
    // add the remaining string to list (the last item)
    $split-arr: append($split-arr, $string);

    @return $split-arr;
}


/// Output rules for elements within a block.
///
/// Ensures the specific `.block .block__element` selector.
///
/// @param {string} $element
///   The element within the block.
@mixin element($element) {
  // capture the block, even if there is a modifier on the block
  $block: nth(simple-selectors(&), 1);
  $selector: "#{&} #{$block}__#{$element}";
  @at-root #{$selector} {
    @content;
  }
}

@mixin modifier($modifier) {
  $block: nth(simple-selectors(&), 1);

  $selector: null;

  // detect if we're in a block or an element
  @if ( $block == "#{&}" ) {
    $selector: selector-append(&, "#{&}--#{$modifier}");
  } @else {
    // since we're using bem, we _know_ that the second bit is the block__element selector
    $bits: str-split("#{&}", " ");
    $element: nth($bits, 2);
    $modified-element: selector-append(#{$element}, "--#{$modifier}");
    $selector: "#{$block} #{$element}#{$modified-element}";
  }

  @at-root #{$selector} {
    @content;
  }
}
